#!/usr/bin/env node

/**
 * Run this script (from root directory): yarn babel-node scripts/sync
 *
 * This script is used to copy the following files to all exercises and keep
 * them in sync:
 *
 * - .eslintignore
 * - .eslintrc
 * - babel.config.js
 * - jest.config.js
 * - package.json
 * - tsconfig.json
 *
 * There is a CI step which checks that package.json in root & exercises match
 * (see checksum script for more info).
 */

const shell = require('shelljs')
const assignment = shell.env['ASSIGNMENT']
const helpers = require('./helpers')
const path = require('path')

function copyConfigForAssignment(assignment) {
  const destination = path.join('exercises', assignment)
  const assignmentPackageFilename = path.join(destination, 'package.json')

  // First copy over all the common files
  helpers.COMMON_FILES.forEach((file) => {
    if (file !== 'package.json') {
      shell.cp(path.join('common', file), path.join(destination, file))
    }
  })

  // Now edit package.json and copy it over
  const packageJson = getCurrentPackageJson(assignmentPackageFilename)
  const basePackageJson = JSON.parse(
    shell.cat('exercise-package.json').toString()
  )

  const mergedPackageJson = helpers.mergePackageJsons(
    basePackageJson,
    packageJson
  )

  shell
    .ShellString(JSON.stringify(mergedPackageJson, undefined, 2) + '\n')
    .to(assignmentPackageFilename)
}

function getCurrentPackageJson(assignmentPackageFilename) {
  const packageFile = shell.cat(assignmentPackageFilename).toString()
  if (!packageFile) {
    const packageJson = JSON.parse(
      shell.cat('exercise-package.json').toString()
    )

    const conceptName = path
      .dirname(assignmentPackageFilename)
      .split(/[/\\]/g)
      .slice(1)

    packageJson.name = `@exercism/typescript-${conceptName.join('-')}`
    packageJson.description = `Exercism ${conceptName[0]} exercise on ${conceptName[1]}`
    return packageJson
  }

  return JSON.parse(packageFile)
}

helpers.registerExitHandler()
helpers.createExercisePackageJson(false)

if (assignment) {
  if (!helpers.assertAssignment(assignment)) {
    shell.exit(1)
  }

  shell.echo('Syncing ' + assignment + '...')
  copyConfigForAssignment(assignment)
} else {
  shell.echo('Syncing all assignments...')
  helpers.assignments.forEach((assignment) => {
    shell.echo('Syncing ' + assignment + '...')
    copyConfigForAssignment(assignment)
  })
}
