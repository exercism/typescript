#!/usr/bin/env node

/**
 * Run this script (from root directory):
 *
 * yarn babel-node scripts/pr-check path/1 path/2 path/3
 *
 * This will run following checks:
 * 1. Find the exercises at all the paths provided
 * 2. Check stub existance for those exercises
 * 3. Check integrity of configuration for those exercises
 * 4. Run eslint for those exercises to check code-style
 */

const {
  findExerciseDirectory,
  cleanUp,
  registerExitHandler,
  envIsThruthy,
  hasStub,
} = require('./helpers')

const shell = require('shelljs')
const path = require('path')
const files = process.argv.slice(2)

if (files.length === 0) {
  shell.echo(
    '[Failure] No files passed in. Pass in paths to exercise directories or its file.'
  )
  shell.exit(-1)
}

const exercises = files
  .map((file) => {
    const directory = findExerciseDirectory(file)
    return directory ? path.basename(directory) : null
  })
  .filter(Boolean)
  .filter((exercise, index, array) => array.indexOf(exercise) === index)

if (exercises.length === 0) {
  shell.echo('[Skip] None of the files are inside an exercise directory.')
  shell.exit(0)
}

registerExitHandler()

if (!envIsThruthy('SKIP_STUB', false)) {
  shell.echo('\n==========\nEnsure stubs are present\n')

  // Inline the stub check instead of running scripts/stub-check, to save a
  // few seconds.
  const noStubs = exercises.filter((assignment) => !hasStub(assignment))

  if (noStubs.length > 0) {
    shell.echo(`[FAILURE] ${noStubs.length} missing a stub`)
    noStubs.forEach((stub) => shell.echo(`${stub} is missing a stub file`))
    shell.exit(-1)
  } else {
    shell.echo('[SUCCES] All stubs are present')
  }
}

if (!envIsThruthy('SKIP_INTEGRITY', false)) {
  shell.echo('\n==========\nCheck configuration and packages integrity\n')

  exercises.forEach((exercise) => {
    shell.env['ASSIGNMENT'] = exercise

    const checkResult = shell.exec(
      `yarn babel-node ${path.join('scripts', 'checksum')}`
    ).code
    if (checkResult != 0) {
      shell.exit(checkResult)
    }
  })
}

// Cleanup tmp directory if any exists
cleanUp()

/**
 * Moves all example and test files to single directory - tmp_exercises
 * This allows running the test command together for all files
 * which is way faster than running once for each exercise
 */

shell.echo('\n==========\nLint all the files\n')

exercises.forEach((exercise) => {
  shell.env['ASSIGNMENT'] = exercise
  shell.env['CLEANUP'] = true

  const checkResult = shell.exec(
    `yarn babel-node ${path.join('scripts', 'lint')}`
  ).code
  if (checkResult != 0) {
    shell.exit(checkResult)
  }
})
